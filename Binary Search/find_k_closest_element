class Solution {
public:
    int find(vector<int> arr, int k , int x){
        int l = 0;
        int h = arr.size() - 1;

        int mid = l + (h - l)/2;
        int ans = h;

        while(l <= h){
            if(arr[mid] >= x){
                ans = mid;
                h = mid - 1;
            }
            else if(x > arr[mid]){
                l = mid + 1;
            }

            mid = l + (h - l)/2;
        }
        return ans;
    }
    vector<int> twoPointerMethod(vector<int>& arr, int k, int x) {

        int h = find(arr,k,x);
        int l = h - 1;
        cout<<h<<" "<<l<<endl;

        while(k--){
            if(l < 0){
                h++;
            }
            // only if its true the rest of it is SKIPPED
            // if its false, the rest of it is executed
            else if(h > arr.size() - 1){
                l--;
            }
            else if(abs(x-arr[l]) > abs(x- arr[h])){
                cout<<"here";
                h++;
            }
            else{
                l--;
            }
        }

        return vector<int>(arr.begin()+ l + 1, arr.begin() + h);

    }
     vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        return twoPointerMethod(arr,k,x);
    }
};
